doctype html
html(lang='en')
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    meta(name='description', content='')
    meta(name='author', content='')
    title Express Restful Demo
    // Bootstrap Core CSS
    link(type='text/css', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css', rel='stylesheet')
    // Custom CSS
    link(type='text/css', href='https://maxcdn.bootstrapcdn.com/bootswatch/3.3.5/cosmo/bootstrap.min.css', rel='stylesheet')
    // HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries
    // WARNING: Respond.js doesn't work if you view the page via file://
    //if lt IE 9
      script(src='https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js')
      script(src='https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js')
    style.
      body {
      padding-top: 70px;
      /* Required padding for .navbar-fixed-top. Remove if using .navbar-static-top. Change if height of navigation changes. */
      }
      .slide-image {
      width: 100%;
      }
      .carousel-holder {
      margin-bottom: 30px;
      }
      .carousel-control,
      .item {
      border-radius: 4px;
      }
      .caption {
      height: 130px;
      overflow: hidden;
      }
      .caption h4 {
      white-space: nowrap;
      }
      .thumbnail img {
      width: 100%;
      }
      .ratings {
      padding-right: 10px;
      padding-left: 10px;
      color: #d17581;
      }
      .thumbnail {
      padding: 0;
      }
      .thumbnail .caption-full {
      padding: 9px;
      color: #333;
      }
      footer {
      margin: 50px 0;
      }
  body
    // Navigation
    nav.navbar.navbar-inverse.navbar-fixed-top(role='navigation')
      .container
        // Brand and toggle get grouped for better mobile display
        .navbar-header
          button.navbar-toggle(type='button', data-toggle='collapse', data-target='#bs-example-navbar-collapse-1')
            span.sr-only Toggle navigation
            span.icon-bar
            span.icon-bar
            span.icon-bar
          a.navbar-brand(href='#') Express Demo
        // Collect the nav links, forms, and other content for toggling
        #bs-example-navbar-collapse-1.collapse.navbar-collapse
          ul.nav.navbar-nav
        // /.navbar-collapse
      // /.container
    // Page Content
    .container
      .row
        .col-md-3
          .list-group
            a.list-group-item(href='#introduction') Introduction
            a.list-group-item(href='#usage') Usage
            a.list-group-item(href='#constraints') Constraints
        .col-md-9
          #introduction
            h1 Introduction
            hr
            p
              | This is a project to demonstrate RESTful HTTP API consumption. For simplicity, it only contains 
              code GET
              |  for retrieving resources and 
              code POST
              |  for creating/maniuplating resources.
            p
              | For these web services, our aim i s to build a version controlled key-value store. The API needs to be able to:
              ol
                li
                  | Accept a key(string) and value(some json blob/string) and store them. If an existing key is sent, the value should be updated
                li Accept a key and return the corresponding latest value
                li
                  | When given a key AND a timestamp, return whatever the value of the key at the time was.
            p
              | The constraints are defined at the constraits section. For the full implementation, you can refer to this 
              a(href='https://github.com/cozyazure/express-demo', target='_blank') Github project
              | .
          #usage
            h1 Usage
            hr
            p
              | The API endpoint is at 
              code /api/object
              | . Altogether, we have two webservices, one as 
              code GET
              | to retrieve the resouces and one using 
              code POST
              |  for creating/updating resources.
            h2 POST (Create)
            h3 Request Object
            p
              | To create a key-value pair, simply pass in the key-value pair as the body of the payload in the following format:
            pre.
              {
                  "myKey":"myValue"
              }                              
            p
              | You can also pass in a valid 
              code json
              |  object as the value in the key-value pair:
            pre.
              {
                "JonSnow": {
                  "HeroName": "Jon Snow, King of North",
                  "HeroAge": "25",
                  "HeroAbility": [{
                    "AbilityName": "Dodging the arrow!",
                    "Cooldown": "Instant"
                  }, {
                    "AbilityName": "Slay the whitewalkers",
                    "Cooldown": "30 seconds"
                  }]
                }
              }                            
            p
              | Note that you will have to pass in a proper JSON object as a payload body, as stated in the constraint. If you do not, you will receive a 
              code 500
              |  Internal Server Error. The type of the value in the key-value pair can either
              |                         be a 
              code string
              |  or a valid 
              code json
              | . Any other type of format will be rejected.
            p
            h3 Response Object
            p
              | If you successfully create the object, a response will be returned as indicating the key-value pair you have inserted, and also a timestamp for references:
            pre.
              {
                "Message": "Successfully inserted!",
                "KeyValuePair": {
                  "myKey": "myValue"
                },
                "TimeStamp": 1481352085110
              }              
            h2 POST (Update)
            p
              | If you pass in key-value pair where the key already existed in the database, the value of that particular will be updated. Do not worry about the previous data, you can always retrieve the old data back as long as you have the timestamp.
            pre.
              {
                  "myKey":"I am going to replace the old myValue!"
              }                              
            |  And the response:
            pre.
              {
                "Message": "Successfully inserted!",
                "KeyValuePair": {
                  "myKey": "I am going to replace the old myValue!"
                },
                "TimeStamp": 1481352976747
              }                                             
            h2 GET (Default)
            p
              | To retrieve the key that has been created, simply add in the value of key parameters in the URL as parameters, in the format of 
              code /api/object/{nameOfKey}
            h3 Request URL
            pre.
              /api/object/myKey              
            h3 Response Object
            pre.
              {
                "Message": "Successfully retrieved!",
                "KeyValuePair": {
                  "myKey": "I am going to replace the old myValue!"
                },
                "TimeStamp": 1481352976747
              }               
            h2
              | GET (with 
              code timestamp
              | )
            |                     If you want to retrieve the previous values of certain key-value pair, you can pass in the timestamp when the moment of key-value is created. The format of the request URL will be in the format of 
            code /api/object/{nameOfKey}?timestamp={oncreatedtimestamp}
            h3 Request URL
            pre.
              /api/object/myKey?timestamp=1481352085110              
            h3 Response Object
            pre.
              {
                "Message": "Successfully retrieved!",
                "KeyValuePair": {
                  "myKey": "myValue"
                },
                "TimeStamp": 1481352085110
              }              
            p
              | Note that if the timestamp value supplied is greater than the real timestamp, the server will return the first key-value pair before the timestamp, should there be any. If no stamp is specified, you will always retrieve the latest
              | value of that key-value pair. Consider the following key-value pair with key 
              code myKey
              |  but has been updated multiple times:
            table.table.table-bordered
              tr
                th Key
                th Value
                th Cretaed on Timestamp
              tr
                td myKey
                td myValue1
                td 1481352085110
              tr
                td myKey
                td myValue2
                td 1481352085230
              tr
                td myKey
                td myValue3
                td 1481352085450
              tr
                td myKey
                td myValue4
                td 1481352085990
            |                     Querying results are as follows:
            table.table.table-bordered
              tr
                th Query URL
                th Value returned
                th(style='width:40%') Reason
              tr
                td
                  code /api/object/myKey
                td myValue4
                td(style='width:40%') When no timestamp is specified, the server will return the latest value
              tr
                td
                  code /api/object/myKey?timestamp=1481352085110
                td myValue1
                td The timestamp is exact
              tr
                td
                  code /api/object/myKey?timestamp=1481352085115
                td myValue1
                td
                  | The timestamp is in between 
                  code 1481352085110
                  |  and 
                  code 1481352085230
                  | , so the value at 
                  code 1481352085110
                  |  will be returned - getting the first key-value pair before the timestamp
              tr
                td
                  code /api/object/myKey?timestamp=1481352085450
                td myValue3
                td The timestamp is exact
              tr
                td
                  code /api/object/myKey?timestamp=1481352085991
                td myValue4
                td
                  | Even though there is no value after 
                  code 1481352085990
                  | , the server will still return the first key-value pair before the timestamp, should it exist
              tr
                td
                  code /api/object/myKey?timestamp=1481352085100
                td Error returned
                td No such key exist before or during that timestamp
          #constraints
            h1 Constraints
            hr
            p
              | There are a few basic assumptions that is made through out the implementation of the API. These assumptions and constraints are made due to the limitation of resources. Most of them are just technical decision, and may differ should
              | the requirements are different.
            ul
              li
                h3 The body of the HTTP request must be in a valid JSON form
                |                             Set the content type to 
                code application/json
                | . The payload must be in a valid JSON format. If not, you will receive an error.
              li
                h3 The key can contain special characters but not spaces.
                |                             The rational of having this restriction is simply to reduce working on parsing the key. In reality, a space (or a tab, or newline for that matter) will not work as a URL resources. If you want spaces in your key, make sure you Base64 encode it before
                |                             creating, and decode it at your end.
              li
                h3
                  | The precision of 
                  code Timestamp
                  |  is down to millisecond, as per Unix standard
                |                             And hence no implementation for race condition that goes down beyond that precision. If two 
                code POST
                |  are called at the same time down to milliseconds, the server simply accepts both of them and its resolve at the machine
                |                             level. If a request of the same key having the same time stamp, the database will choose the one which is last stored.
              li
                h3 The server will sleep after 30 minutes of inactivity
                |                             This is a constraint of the services provided by Heroku, due to being free.
              li
                h3 The database can only contains 10000 records
                |                             This is the limitation by Heroku services too. I will check the health of the database and reset it once in a while.
    // /.container
    .container
      hr
      // Footer
      footer
        .row
          .col-lg-12
            p Copyright © CozyAzure
    // /.container
    // Latest compiled and minified JavaScript
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js')
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js', integrity='sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa', crossorigin='anonymous')
